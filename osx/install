#!/bin/sh
# install: install / uninstall activation + tooling + brew/podman/machine/pass
# Usage:
#   ./install [remote]        # Install activation + PATH + brew/podman/machine/pass
#   ./install --uninstall     # Remove EVERYTHING this script installed (incl. Podman machine)

set -eu

[ -n "${DEBUG:-}" ] && set -x

# ---- paths / config ----
script_dir=$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)
repo_dir=${REPO_DIR:-$(cd "${script_dir}/.." && pwd -P)}
la_dir="${HOME}/Library/LaunchAgents"
uid_name=$(id -un)
uid_num=$(id -u)
bin_dir="${repo_dir}/bin"

machine=${MACHINE:-com.nashspence.scripts}
podman_cpus=${PODMAN_CPUS:-14}
podman_mem=${PODMAN_MEM:-20480}
podman_disk=${PODMAN_DISK:-40}

pass_repo=${PASS_REPO:-"${HOME}/git/secrets"}

path_begin="# >>> podman-scripts PATH >>>"
path_end="# <<< podman-scripts PATH <<<"
export_repo_line="export PODMAN_SCRIPTS_DIR=\"${repo_dir}\""
source_repo_line=". \"\${PODMAN_SCRIPTS_DIR}/lib.sh\""
source_osx_line=". \"\${PODMAN_SCRIPTS_DIR}/osx/lib.sh\""
password_store_line="export PASSWORD_STORE_DIR=\"${pass_repo}\""

die() {
    printf 'ERROR: %s\n' "$*" >&2
    exit 1
}

add_path_block() {
    file=$1
    [ -f "${file}" ] || : >"${file}"
    if ! grep -Fqx "${path_begin}" "${file}" 2>/dev/null; then
        {
            printf '\n%s\n' "${path_begin}"
            printf '%s\n' "${export_repo_line}"
            printf '%s\n' "${source_repo_line}"
            printf '%s\n' "${source_osx_line}"
            printf '%s\n' "${password_store_line}"
            printf '%s\n' "${path_end}"
        } >>"${file}"
        printf '  + added PATH block to %s\n' "${file#"${HOME}/"}"
    fi
}

remove_path_block() {
    file=$1
    [ -f "${file}" ] || return 0
    tmp=$(mktemp)
    awk -v b="${path_begin}" -v e="${path_end}" '
        $0==b {skip=1}
        !skip {print}
        $0==e {skip=0}
    ' "${file}" >"${tmp}"
    mv "${tmp}" "${file}"
}

ensure_brew() {
    if command -v brew >/dev/null 2>&1; then
        return 0
    fi
    if [ -x /opt/homebrew/bin/brew ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)" || true
        return 0
    fi
    if [ -x /usr/local/bin/brew ]; then
        eval "$(/usr/local/bin/brew shellenv)" || true
        return 0
    fi
    echo "Homebrew not found — installing Homebrew..."
    NONINTERACTIVE=1 /bin/bash -c \
        "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [ -x /opt/homebrew/bin/brew ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)" || true
    elif [ -x /usr/local/bin/brew ]; then
        eval "$(/usr/local/bin/brew shellenv)" || true
    fi
    command -v brew >/dev/null 2>&1 || die "brew installation appears to have failed"
}

ensure_podman() {
    if command -v podman >/dev/null 2>&1; then
        return 0
    fi
    echo "Installing Podman with Homebrew…"
    brew list podman >/dev/null 2>&1 || brew install podman
    command -v podman >/dev/null 2>&1 || die "podman not found after installation"
}

ensure_podman_machine() {
    if podman machine inspect "${machine}" >/dev/null 2>&1; then
        return 0
    fi
    echo "Creating Podman machine '${machine}' (cpus=${podman_cpus}, mem=${podman_mem}MB, disk=${podman_disk}GB)…"
    podman machine init \
        -v /Users:/Users -v /Volumes:/Volumes \
        --cpus "${podman_cpus}" \
        --memory "${podman_mem}" \
        --disk-size "${podman_disk}" \
        "${machine}"
    # do not start the machine; the launch agent or user will handle it
}

ensure_swiftc() {
    if command -v swiftc >/dev/null 2>&1; then return 0; fi
    if command -v xcrun >/dev/null 2>&1 && xcrun -f swiftc >/dev/null 2>&1; then return 0; fi
    die "swiftc not found. Install Xcode Command Line Tools (xcode-select --install) and re-run."
}

ensure_pass() {
    if command -v pass >/dev/null 2>&1; then
        return 0
    fi
    echo "Installing pass with Homebrew…"
    brew list pass >/dev/null 2>&1 || brew install pass
    command -v pass >/dev/null 2>&1 || die "pass not found after installation"
}

setup_pass_repo() {
    remote=${1:-}
    store="${pass_repo}"
    mkdir -p "$store"
    PASSWORD_STORE_DIR="$store"
    export PASSWORD_STORE_DIR
    if [ -d "$store/.git" ] && [ -f "$store/.gpg-id" ] && [ -z "$remote" ]; then
        return 0
    fi
    if [ ! -d "$store/.git" ]; then
        pass git init >/dev/null 2>&1 || true
    fi
    if [ ! -f "$store/.gpg-id" ]; then
        gpg_id=$(gpg --list-secret-keys --with-colons 2>/dev/null | awk -F: '/^sec/ {print $5; exit}')
        if [ -n "$gpg_id" ]; then
            pass init "$gpg_id" >/dev/null 2>&1 || true
        else
            printf 'Warning: no GPG key found; run "gpg --gen-key" and re-run pass init\n' >&2
        fi
    fi
    if [ -n "$remote" ]; then
        if pass git remote get-url origin >/dev/null 2>&1; then
            pass git remote set-url origin "$remote"
        else
            pass git remote add origin "$remote"
        fi
        pass git pull --rebase origin main >/dev/null 2>&1 || pass git pull --rebase origin master >/dev/null 2>&1 || true
        pass git push -u origin HEAD >/dev/null 2>&1 || true
    fi
}

remove_podman_machine() {
    if podman machine inspect "${machine}" >/dev/null 2>&1; then
        podman machine stop "${machine}" >/dev/null 2>&1 || true
        podman machine rm -f "${machine}" >/dev/null 2>&1 || true
    fi
}

install_launch_agent() {
    dir=$1
    plist_src=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
    [ -n "${plist_src}" ] || die "missing plist in ${dir}"
    label=$(basename "${plist_src}" .plist)
    plist="${la_dir}/${label}.plist"

    mkdir -p "${la_dir}"
    mkdir -p "${dir}/data"

    if [ -f "${dir}/on-mount.swift" ]; then
        ensure_swiftc
        out="${dir}/on-mount"
        src="${dir}/on-mount.swift"
        src_mtime=$(stat -f %m "$src")
        out_mtime=$(stat -f %m "$out" 2>/dev/null || echo 0)
        if [ ! -x "${out}" ] || [ "$src_mtime" -gt "$out_mtime" ]; then
            echo "Compiling $(basename "$src") → ${out}"
            if command -v xcrun >/dev/null 2>&1; then
                xcrun swiftc -O -framework AppKit -o "$out" "$src"
            else
                swiftc -O -framework AppKit -o "$out" "$src"
            fi
            chmod 0755 "$out"
        fi
    fi

    sed -e "s|%UID%|$uid_name|g" \
        -e "s|%UID_NUM%|$uid_num|g" \
        -e "s|%MACHINE%|$machine|g" \
        -e "s|%REPO_DIR%|$repo_dir|g" \
        "${plist_src}" >"${plist}"
    chmod 644 "${plist}"

    launchctl bootout "gui/${uid_num}" "${plist}" >/dev/null 2>&1 || true
    launchctl bootstrap "gui/${uid_num}" "${plist}"
    launchctl kickstart -k "gui/${uid_num}/${label}" >/dev/null 2>&1 || true

    printf 'Loaded %s LaunchAgent.\n' "${label}"
}

uninstall_launch_agent() {
    dir=$1
    plist_src=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
    [ -n "${plist_src}" ] || return 0
    label=$(basename "${plist_src}" .plist)
    plist="${la_dir}/${label}.plist"

    launchctl bootout "gui/${uid_num}" "${plist}" >/dev/null 2>&1 || true
    rm -f "${plist}"

    rm -rf "${dir}/data" 2>/dev/null || true
}

install_launch_agents() {
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        install_launch_agent "${dir}"
    done
}

uninstall_launch_agents() {
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        uninstall_launch_agent "${dir}"
    done
}


install_all() {
    pass_remote=${1:-}
    [ -d "${bin_dir}" ] || die "required directory missing: ${bin_dir} (must contain 'use-scripts-machine' and 'nsimg')"
    [ -f "${bin_dir}/use-scripts-machine" ] || die "required tool missing: ${bin_dir}/use-scripts-machine"
    [ -f "${bin_dir}/nsimg" ] || die "required tool missing: ${bin_dir}/nsimg"
    chmod +x "${bin_dir}/use-scripts-machine" 2>/dev/null || true
    chmod +x "${bin_dir}/nsimg" 2>/dev/null || true

    [ -d "${script_dir}/launch-agents" ] || die "missing directory: ${script_dir}/launch-agents"
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        plist=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
        [ -f "${plist}" ] || die "missing plist in: ${dir}"
        if ! find "${dir}" -maxdepth 1 -type f ! -name '*.plist' | read -r _; then
            die "missing agent file in: ${dir}"
        fi
    done

    mkdir -p "${la_dir}"

    add_path_block "${HOME}/.zprofile"
    add_path_block "${HOME}/.zshrc"

    ensure_brew
    ensure_pass
    ensure_podman
    ensure_podman_machine
    ensure_swiftc
    setup_pass_repo "$pass_remote"

    install_launch_agents

    echo "Install complete."
}

uninstall_all() {
    echo "Uninstalling EVERYTHING this script installed…"

    uninstall_launch_agents

    sock="/tmp/com.nashspence.scripts.podman-machine.${uid_num}.sock"
    [ -S "${sock}" ] && rm -f "${sock}"

    remove_path_block "${HOME}/.zprofile"
    remove_path_block "${HOME}/.zshrc"

    remove_podman_machine

    echo "Uninstall complete."
}

if [ "$#" -eq 1 ] && [ "$1" = "--uninstall" ]; then
    uninstall_all
elif [ "$#" -le 1 ]; then
    install_all "${1:-}"
else
    cat <<USAGE >&2
Usage:
  $0 [remote]        Install activation + add paths + brew/podman/machine/pass
  $0 --uninstall     Remove EVERYTHING this script installed (incl. Podman machine)
USAGE
    exit 2
fi
