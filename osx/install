#!/bin/sh
# install: install / uninstall activation + wrapper tooling + brew/podman/machine
# Usage:
#   ./install                 # Install everything (activation + wrappers + PATH + brew/podman/machine)
#   ./install --uninstall     # Remove EVERYTHING this script installed (incl. Podman machine)

set -eu

[ -n "${DEBUG:-}" ] && set -x

# ---- paths / config ----
script_dir=$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)
repo_dir=${REPO_DIR:-$(cd "${script_dir}/.." && pwd -P)}
wrappers_dir=${WRAPPERS_DIR:-"${repo_dir}/.wrappers"}
files_dir=${FILES_DIR:-"${repo_dir}"}
la_dir="${HOME}/Library/LaunchAgents"
uid_name=$(id -un)
uid_num=$(id -u)
osxbin_dir="${script_dir}/bin"

templates_dir="${script_dir}/templates"
wrapper_template="${templates_dir}/wrapper.zsh"
wrapper_release_template="${templates_dir}/wrapper-release.zsh"
wrapper_releaseonly_template="${templates_dir}/wrapper-release-only.zsh"

machine=${MACHINE:-com.nashspence.scripts}
podman_cpus=${PODMAN_CPUS:-14}
podman_mem=${PODMAN_MEM:-20480}
podman_disk=${PODMAN_DISK:-40}

path_begin="# >>> podman-scripts PATH >>>"
path_end="# <<< podman-scripts PATH <<<"
export_repo_line="export PODMAN_SCRIPTS_DIR=\"${repo_dir}\""
source_lib_line=". \"\${PODMAN_SCRIPTS_DIR}/osx/lib.sh\""

die() {
    printf 'ERROR: %s\n' "$*" >&2
    exit 1
}

add_path_block() {
    file=$1
    [ -f "${file}" ] || : >"${file}"
    if ! grep -Fqx "${path_begin}" "${file}" 2>/dev/null; then
        {
            printf '\n%s\n' "${path_begin}"
            printf '%s\n' "${export_repo_line}"
            printf '%s\n' "${source_lib_line}"
            printf '%s\n' "${path_end}"
        } >>"${file}"
        printf '  + added PATH block to %s\n' "${file#"${HOME}/"}"
    fi
}

remove_path_block() {
    file=$1
    [ -f "${file}" ] || return 0
    tmp=$(mktemp)
    awk -v b="${path_begin}" -v e="${path_end}" '
        $0==b {skip=1}
        !skip {print}
        $0==e {skip=0}
    ' "${file}" >"${tmp}"
    mv "${tmp}" "${file}"
}

ensure_brew() {
    if command -v brew >/dev/null 2>&1; then
        return 0
    fi
    if [ -x /opt/homebrew/bin/brew ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)" || true
        return 0
    fi
    if [ -x /usr/local/bin/brew ]; then
        eval "$(/usr/local/bin/brew shellenv)" || true
        return 0
    fi
    echo "Homebrew not found — installing Homebrew..."
    NONINTERACTIVE=1 /bin/bash -c \
        "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [ -x /opt/homebrew/bin/brew ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)" || true
    elif [ -x /usr/local/bin/brew ]; then
        eval "$(/usr/local/bin/brew shellenv)" || true
    fi
    command -v brew >/dev/null 2>&1 || die "brew installation appears to have failed"
}

ensure_podman() {
    if command -v podman >/dev/null 2>&1; then
        return 0
    fi
    echo "Installing Podman with Homebrew…"
    brew list podman >/dev/null 2>&1 || brew install podman
    command -v podman >/dev/null 2>&1 || die "podman not found after installation"
}

ensure_podman_machine() {
    if podman machine inspect "${machine}" >/dev/null 2>&1; then
        return 0
    fi
    echo "Creating Podman machine '${machine}' (cpus=${podman_cpus}, mem=${podman_mem}MB, disk=${podman_disk}GB)…"
    podman machine init \
        -v /Users:/Users -v /Volumes:/Volumes \
        --cpus "${podman_cpus}" \
        --memory "${podman_mem}" \
        --disk-size "${podman_disk}" \
        "${machine}"
    podman machine start "${machine}"
}

remove_podman_machine() {
    if podman machine inspect "${machine}" >/dev/null 2>&1; then
        podman machine stop "${machine}" >/dev/null 2>&1 || true
        podman machine rm -f "${machine}" >/dev/null 2>&1 || true
    fi
}

install_launch_agent() {
    dir=$1
    plist_src=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
    [ -n "${plist_src}" ] || die "missing plist in ${dir}"
    label=$(basename "${plist_src}" .plist)
    plist="${la_dir}/${label}.plist"

    mkdir -p "${la_dir}"

    sed -e "s|%UID%|$uid_name|g" \
        -e "s|%UID_NUM%|$uid_num|g" \
        -e "s|%MACHINE%|$machine|g" \
        -e "s|%REPO_DIR%|$repo_dir|g" \
        "${plist_src}" >"${plist}"
    chmod 644 "${plist}"

    launchctl bootout "gui/${uid_num}" "${plist}" >/dev/null 2>&1 || true
    launchctl bootstrap "gui/${uid_num}" "${plist}"
    launchctl kickstart -k "gui/${uid_num}/${label}" >/dev/null 2>&1 || true

    printf 'Loaded %s LaunchAgent.\n' "${label}"
}

uninstall_launch_agent() {
    dir=$1
    plist_src=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
    [ -n "${plist_src}" ] || return 0
    label=$(basename "${plist_src}" .plist)
    plist="${la_dir}/${label}.plist"

    launchctl bootout "gui/${uid_num}" "${plist}" >/dev/null 2>&1 || true
    rm -f "${plist}"

    case "$label" in
        com.nashspence.scripts.podman-machine)
            rm -rf "$dir/data" 2>/dev/null || true
            ;;
    esac
}

install_launch_agents() {
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        install_launch_agent "${dir}"
    done
}

uninstall_launch_agents() {
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        uninstall_launch_agent "${dir}"
    done
}

make_name() {
    cf=$1
    base=$(basename "$cf")
    dirn=$(basename "$(dirname "$cf")")
    lower=$(printf '%s' "$base" | tr '[:upper:]' '[:lower:]')
    case $lower in
        containerfile|dockerfile|release.yaml)
            stem=$dirn
            ;;
        *)
            stem=$base
            stem=${stem%.Containerfile}
            stem=${stem%.containerfile}
            stem=${stem%.Dockerfile}
            stem=${stem%.dockerfile}
            stem=${stem%.*}
            [ -n "$stem" ] || stem=$dirn
            ;;
    esac
    slug=$(printf '%s' "$stem" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g; s/^-*//; s/-*$//')
    [ -n "$slug" ] || slug=$(printf '%s' "$dirn" | tr '[:upper:]' '[:lower:]')
    out=$slug
    i=2
    while [ -e "$wrappers_dir/$out" ]; do
        out="$slug-$i"
        i=$((i+1))
    done
    printf '%s\n' "$out"
}

generate_wrappers() {
    printf 'Repo:            %s\n' "$repo_dir"
    printf 'Scan root:       %s\n' "$files_dir"
    printf 'Wrappers out:    %s\n' "$wrappers_dir"
    rm -rf "$wrappers_dir"
    mkdir -p "$wrappers_dir"

    index_file="$wrappers_dir/index.tsv"
    : >"$index_file"

    find "${files_dir}" -type f \( -name Containerfile -o -name '*.Containerfile' -o -name '*.containerfile' -o -name Dockerfile -o -name '*.Dockerfile' -o -name '*.dockerfile' \) | while IFS= read -r cf; do
        name=$(make_name "$cf")
        dir=$(dirname "${cf}")
        abs=$(cd "${dir}" && pwd)/$(basename "${cf}")
        rel="${dir}/release.yaml"
        if [ -f "${rel}" ]; then
            tpl=${wrapper_release_template}
            rel=$(cd "${dir}" && pwd)/release.yaml
        else
            tpl=${wrapper_template}
            rel=""
        fi
        sed -e "s|%NAME%|$name|g" \
            -e "s|%ABS%|${abs}|g" \
            -e "s|%REL%|${rel}|g" \
            "${tpl}" >"${wrappers_dir}/${name}"
        chmod +x "${wrappers_dir}/${name}"
        printf '%s\t%s\n' "${name}" "${abs}" >>"${index_file}"
        printf '  + %s -> %s\n' "${name}" "${abs}"
    done

    find "${files_dir}/portable" -type f -name release.yaml | while IFS= read -r relf; do
        dir=$(dirname "${relf}")
        if find "${dir}" -maxdepth 1 -type f \( -name Containerfile -o -name '*.Containerfile' -o -name '*.containerfile' -o -name Dockerfile -o -name '*.Dockerfile' -o -name '*.dockerfile' \) | read -r _; then
            continue
        fi
        name=$(make_name "${relf}")
        abs=$(cd "${dir}" && pwd)/release.yaml
        sed -e "s|%NAME%|$name|g" \
            -e "s|%ABS%|${abs}|g" \
            "${wrapper_releaseonly_template}" >"${wrappers_dir}/${name}"
        chmod +x "${wrappers_dir}/${name}"
        printf '%s\t%s\n' "${name}" "${abs}" >>"${index_file}"
        printf '  + %s -> %s\n' "${name}" "${abs}"
    done

    printf 'Wrote index: %s\n' "${index_file}"
    echo "Done generating wrappers."
}

install_all() {
    [ -d "${osxbin_dir}" ] || die "required directory missing: ${osxbin_dir} (must contain 'podman-scripts-machine')"
    [ -f "${osxbin_dir}/podman-scripts-machine" ] || die "required tool missing: ${osxbin_dir}/podman-scripts-machine"
    chmod +x "${osxbin_dir}/podman-scripts-machine" 2>/dev/null || true

    [ -f "${wrapper_template}" ] || die "missing template: ${wrapper_template}"
    [ -f "${wrapper_release_template}" ] || die "missing template: ${wrapper_release_template}"
    [ -f "${wrapper_releaseonly_template}" ] || die "missing template: ${wrapper_releaseonly_template}"
    [ -d "${script_dir}/launch-agents" ] || die "missing directory: ${script_dir}/launch-agents"
    for dir in "${script_dir}/launch-agents"/*; do
        [ -d "${dir}" ] || continue
        plist=$(find "${dir}" -maxdepth 1 -name '*.plist' | head -n1)
        [ -f "${plist}" ] || die "missing plist in: ${dir}"
        if ! find "${dir}" -maxdepth 1 -type f ! -name '*.plist' | read -r _; then
            die "missing agent file in: ${dir}"
        fi
    done

    mkdir -p "${la_dir}"

    add_path_block "${HOME}/.zprofile"
    add_path_block "${HOME}/.zshrc"

    ensure_brew
    ensure_podman
    ensure_podman_machine

    install_launch_agents
    generate_wrappers

    echo "Install complete."
}

uninstall_all() {
    echo "Uninstalling EVERYTHING this script installed…"

    if [ -d "${wrappers_dir}" ]; then
        echo "Deleting generated wrappers directory: ${wrappers_dir}"
        rm -rf "${wrappers_dir}"
    fi

    uninstall_launch_agents

    sock="/tmp/com.nashspence.scripts.podman-machine.${uid_num}.sock"
    [ -S "${sock}" ] && rm -f "${sock}"

    remove_path_block "${HOME}/.zprofile"
    remove_path_block "${HOME}/.zshrc"

    remove_podman_machine

    echo "Uninstall complete."
}

if [ "$#" -eq 1 ] && [ "$1" = "--uninstall" ]; then
    uninstall_all
elif [ "$#" -eq 0 ]; then
    install_all
else
    cat <<USAGE >&2
Usage:
  $0                 Install activation + generate wrappers + add paths + brew/podman/machine
  $0 --uninstall     Remove EVERYTHING this script installed (incl. Podman machine)
USAGE
    exit 2
fi
