#!/usr/bin/env zsh
# install: install / uninstall activation + wrapper tooling + brew/podman/machine (pure zsh)
# Usage:
#   ./install                 # Install everything (activation + wrappers + PATH + brew/podman/machine)
#   ./install --uninstall     # Remove EVERYTHING this script installed (incl. Podman machine)

set -e
set -u
set -o pipefail
[[ -n "${DEBUG:-}" ]] && set -x

main() {
  emulate -L zsh
  set -e
  set -u
  set -o pipefail
  setopt err_return pipefail null_glob extended_glob

  # ---- Paths / Config (env-overridable) ------------------------------------
  typeset -gr SCRIPT_PATH="${(%):-%N}"
  typeset -gr SCRIPT_DIR="${SCRIPT_PATH:A:h}"

  typeset -g REPO_DIR="${REPO_DIR:-${SCRIPT_DIR:h}}"
  typeset -g WRAPPERS_DIR="${WRAPPERS_DIR:-${REPO_DIR}/.wrappers}"
  typeset -g FILES_DIR="${FILES_DIR:-$REPO_DIR}"
  typeset -gr LA_DIR="$HOME/Library/LaunchAgents"
  typeset -gr UID_NUM="$(id -u)"
  typeset -g OSXBIN_DIR="${SCRIPT_DIR}/bin"   # must contain podman-script-machine

  typeset -gr TEMPLATES_DIR="${SCRIPT_DIR}/templates"
  typeset -gr WRAPPER_TEMPLATE="${TEMPLATES_DIR}/wrapper.zsh"
  typeset -gr WRAPPER_RELEASE_TEMPLATE="${TEMPLATES_DIR}/wrapper-release.zsh"
  typeset -gr WRAPPER_RELEASEONLY_TEMPLATE="${TEMPLATES_DIR}/wrapper-release-only.zsh"

  typeset -g MACHINE="${MACHINE:-com.nashspence.scripts}"
  typeset -g PODMAN_CPUS="${PODMAN_CPUS:-8}"
  typeset -g PODMAN_MEM="${PODMAN_MEM:-18432}"
  typeset -g PODMAN_DISK="${PODMAN_DISK:-20}"

  # ---- Launch agent configuration -----------------------------------------
  typeset -gr UID_NAME="$(id -un)"
  typeset -gr LAUNCH_AGENTS_DIR="${SCRIPT_DIR}/launch-agents"
  typeset -a LAUNCH_AGENT_DIRS=()
  for dir in "${LAUNCH_AGENTS_DIR}"/*; do
    [[ -d "$dir" ]] || continue
    LAUNCH_AGENT_DIRS+=("$dir")
  done

  # ---- PATH block markers ---------------------------------------------------
  typeset -gr PATH_BEGIN_MARK="# >>> podman-scripts PATH >>>"
  typeset -gr PATH_END_MARK="# <<< podman-scripts PATH <<<"
  typeset -gr PATH_EXPORT_LINE="export PATH=\"${WRAPPERS_DIR}:${OSXBIN_DIR}:\$PATH\""

  # ---- Helpers --------------------------------------------------------------
  die() { print -u2 -- "ERROR: $*"; exit 1; }
  rehash_safely() { rehash 2>/dev/null || hash -r 2>/dev/null || true; }

  add_path_block() {
    local file="$1"
    [[ -f "$file" ]] || : > "$file"
    if ! grep -Fqx -- "$PATH_BEGIN_MARK" "$file" 2>/dev/null; then
      {
        printf '\n%s\n' "$PATH_BEGIN_MARK"
        printf '%s\n' "$PATH_EXPORT_LINE"
        printf '%s\n' "$PATH_END_MARK"
      } >> "$file"
      echo "  + added PATH block to ${file##$HOME/}"
    fi
  }

  remove_path_block() {
    local file="$1"
    [[ -f "$file" ]] || return 0
    # BSD sed in-place with explicit backup suffix ''.
    sed -E -i '' "/$(printf '%s' "$PATH_BEGIN_MARK" | sed 's/[^^]/[&]/g; s/\^/\\^/g')/,/$(printf '%s' "$PATH_END_MARK" | sed 's/[^^]/[&]/g; s/\^/\\^/g')/d" "$file" || true
  }

  ensure_brew() {
    if command -v brew >/dev/null 2>&1; then
      return 0
    elif [[ -x /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)" || true
      rehash_safely; return 0
    elif [[ -x /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)" || true
      rehash_safely; return 0
    fi

    echo "Homebrew not found — installing Homebrew..."
    NONINTERACTIVE=1 /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    if [[ -x /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -x /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    rehash_safely
    command -v brew >/dev/null 2>&1 || die "brew installation appears to have failed"
  }

  ensure_podman() {
    if ! command -v podman >/dev/null 2>&1; then
      echo "Installing Podman with Homebrew…"
      brew list podman >/dev/null 2>&1 || brew install podman
      rehash_safely
    fi
    command -v podman >/dev/null 2>&1 || die "podman not found after installation"
  }

  ensure_podman_machine() {
    if ! podman machine inspect "$MACHINE" >/dev/null 2>&1; then
      echo "Creating Podman machine '$MACHINE' (cpus=$PODMAN_CPUS, mem=${PODMAN_MEM}MB, disk=${PODMAN_DISK}GB)…"
      podman machine init \
        -v /Users:/Users -v /Volumes:/Volumes \
        --cpus "$PODMAN_CPUS" \
        --memory "$PODMAN_MEM" \
        --disk-size "$PODMAN_DISK" \
        "$MACHINE"
    else
      echo "Podman machine '$MACHINE' already exists."
    fi
  }

  remove_podman_machine() {
    if command -v podman >/dev/null 2>&1; then
      if podman machine inspect "$MACHINE" >/dev/null 2>&1; then
        echo "Removing Podman machine '$MACHINE'…"
        podman machine stop "$MACHINE" >/dev/null 2>&1 || true
        podman machine rm -f "$MACHINE"   >/dev/null 2>&1 || true
      fi
    fi
  }

  typeset -A LAUNCH_AGENT_RESOURCES=(
    [com.nashspence.on-mount]="state.tsv"
    [com.nashspence.podman-machine]="agent"
  )

  install_launch_agent() {
    local dir="$1" plist_src label plist
    plist_src=("$dir"/*.plist(N))
    label="${plist_src[1]:t:r}"
    plist="$LA_DIR/${label}.plist"

    mkdir -p "$LA_DIR"

    sed -e "s|%UID%|${UID_NAME//&/\\&}|g" \
        -e "s|%UID_NUM%|${UID_NUM//&/\\&}|g" \
        -e "s|%MACHINE%|${MACHINE//&/\\&}|g" \
        -e "s|%REPO_DIR%|${REPO_DIR//&/\\&}|g" \
        "${plist_src[1]}" > "$plist"
    chmod 644 "$plist"

    launchctl bootout "gui/$UID_NUM" "$plist" >/dev/null 2>&1 || true
    launchctl bootstrap "gui/$UID_NUM" "$plist"
    launchctl kickstart -k "gui/$UID_NUM/$label" 2>/dev/null || true

    echo "Loaded ${label} LaunchAgent."
  }

  uninstall_launch_agent() {
    local dir="$1" plist_src label plist resources
    plist_src=("$dir"/*.plist(N))
    label="${plist_src[1]:t:r}"
    plist="$LA_DIR/${label}.plist"

    launchctl bootout "gui/$UID_NUM" "$plist" >/dev/null 2>&1 || true
    rm -f "$plist"

    resources="${LAUNCH_AGENT_RESOURCES[$label]:-}"
    if [[ -n "$resources" ]]; then
      local r
      for r in ${(s: :)resources}; do
        rm -rf "$dir/$r" 2>/dev/null || true
      done
    fi
  }

  install_launch_agents() {
    local dir
    for dir in "${LAUNCH_AGENT_DIRS[@]}"; do
      install_launch_agent "$dir"
    done
  }

  uninstall_launch_agents() {
    local dir
    for dir in "${LAUNCH_AGENT_DIRS[@]}"; do
      uninstall_launch_agent "$dir"
    done
  }

  generate_wrappers() {
    echo "Repo:            $REPO_DIR"
    echo "Scan root:       $FILES_DIR"
    echo "Wrappers out:    $WRAPPERS_DIR"
    rm -rf "$WRAPPERS_DIR"
    mkdir -p "$WRAPPERS_DIR"

    typeset -A used_names
    local index_file="${WRAPPERS_DIR}/index.tsv"
    : > "$index_file"

    make_name() {
      local cf="$1"
      local base="${cf:t}"
      local dirn="${cf:h:t}"   # parent directory name
      local stem slug out i=2

      case "${base:l}" in
        containerfile|dockerfile|release.yaml)
          # Canonical filenames: use the directory as the service name
          stem="$dirn"
          ;;
        *)
          # Use the file stem with common suffixes stripped
          stem="$base"
          stem="${stem%.Containerfile}"; stem="${stem%.containerfile}"
          stem="${stem%.Dockerfile}";    stem="${stem%.dockerfile}"
          stem="${stem%.*}"
          [[ -z "$stem" ]] && stem="$dir"
          ;;
      esac

      slug="${(L)stem//[^a-z0-9._-]/-}"
      slug="${slug##-}"; slug="${slug%%-}"
      [[ -z "$slug" ]] && slug="${(L)dirn}"

      out="$slug"
      while [[ -n "${used_names[$out]:-}" || -e "$WRAPPERS_DIR/$out" ]]; do
        out="${slug}-${i}"
        (( i++ ))
      done
      used_names[$out]=1
      print -r -- "$out"
    }

    local cf name abs wrapper rel tpl
    for cf in \
      "$FILES_DIR"/**/Containerfile(.N) "$FILES_DIR"/**/*.Containerfile(.N) "$FILES_DIR"/**/*.containerfile(.N) \
      "$FILES_DIR"/**/Dockerfile(.N)    "$FILES_DIR"/**/*.Dockerfile(.N)    "$FILES_DIR"/**/*.dockerfile(.N)
    do
      [[ -f "$cf" ]] || continue
      name="$(make_name "$cf")"
      abs="${cf:A}"
      wrapper="${WRAPPERS_DIR}/${name}"
      rel="${cf:h}/release.yaml"; rel="${rel:A}"

      if [[ -f "$rel" ]]; then
        tpl="$WRAPPER_RELEASE_TEMPLATE"
      else
        tpl="$WRAPPER_TEMPLATE"
      fi

      sed -e "s|%NAME%|${name//&/\\&}|g" \
          -e "s|%ABS%|${abs//&/\\&}|g" \
          -e "s|%REL%|${rel//&/\\&}|g" \
          "$tpl" > "$wrapper"
      chmod +x "$wrapper"

    printf '%s\t%s\n' "$name" "$abs" >> "$index_file"
    echo "  + ${name} -> ${abs}"
  done

  # release.yaml-only directories (no Containerfile)
  local relf
  for relf in "$FILES_DIR"/portable/**/release.yaml(.N); do
    [[ -f "$relf" ]] || continue
    local dir
    dir="${relf:h}"
    if [[ -f "$dir/Containerfile" || -f "$dir"/*.Containerfile(.N) || -f "$dir"/*.containerfile(.N) \
          || -f "$dir/Dockerfile" || -f "$dir"/*.Dockerfile(.N) || -f "$dir"/*.dockerfile(.N) ]]; then
      continue
    fi
    name="$(make_name "$relf")"
    abs="${relf:A}"
    wrapper="${WRAPPERS_DIR}/${name}"
    sed -e "s|%NAME%|${name//&/\\&}|g" \
        -e "s|%ABS%|${abs//&/\\&}|g" \
        "$WRAPPER_RELEASEONLY_TEMPLATE" > "$wrapper"
    chmod +x "$wrapper"

    printf '%s\t%s\n' "$name" "$abs" >> "$index_file"
    echo "  + ${name} -> ${abs}"
  done

    echo "Wrote index: $index_file"
    echo "Done generating wrappers."
  }

  install_all() {
    # require OSXBIN_DIR and podman-script-machine
    [[ -d "$OSXBIN_DIR" ]] || die "required directory missing: $OSXBIN_DIR (must contain 'podman-script-machine')"
    [[ -f "$OSXBIN_DIR/podman-script-machine" ]] || die "required tool missing: $OSXBIN_DIR/podman-script-machine"
    chmod +x "$OSXBIN_DIR/podman-script-machine" 2>/dev/null || true

    [[ -f "$WRAPPER_TEMPLATE" ]] || die "missing template: $WRAPPER_TEMPLATE"
    [[ -f "$WRAPPER_RELEASE_TEMPLATE" ]] || die "missing template: $WRAPPER_RELEASE_TEMPLATE"
    [[ -f "$WRAPPER_RELEASEONLY_TEMPLATE" ]] || die "missing template: $WRAPPER_RELEASEONLY_TEMPLATE"
    [[ -d "$LAUNCH_AGENTS_DIR" ]] || die "missing directory: $LAUNCH_AGENTS_DIR"
    local dir plist has_file f
    for dir in "${LAUNCH_AGENT_DIRS[@]}"; do
      plist=("$dir"/*.plist(N))
      [[ -f "${plist[1]}" ]] || die "missing plist in: $dir"
      has_file=0
      for f in "$dir"/*(N); do
        [[ "$f" == *.plist ]] && continue
        has_file=1; break
      done
      (( has_file )) || die "missing agent file in: $dir"
    done

    mkdir -p "$LA_DIR"

    # 0) Ensure PATH blocks
    add_path_block "$HOME/.zprofile"
    add_path_block "$HOME/.zshrc"

    # 0.5) Ensure brew & podman & machine
    ensure_brew
    ensure_podman
    ensure_podman_machine

    # 1) LaunchAgents
    install_launch_agents

    # 2) Generate wrappers
    generate_wrappers

    echo "Install complete."
  }

  uninstall_all() {
    echo "Uninstalling EVERYTHING this script installed…"

    if [[ -d "$WRAPPERS_DIR" ]]; then
      echo "Deleting generated wrappers directory: $WRAPPERS_DIR"
      rm -rf "$WRAPPERS_DIR"
    fi

    uninstall_launch_agents

    local sock="/tmp/com.nashspence.podman-machine.$UID_NUM.sock"
    [[ -S "$sock" ]] && rm -f "$sock" || true

    remove_path_block "$HOME/.zprofile"
    remove_path_block "$HOME/.zshrc"

    remove_podman_machine

    echo "Uninstall complete."
  }

  # ---- Main ---------------------------------------------------------------
  if (( $# == 1 )) && [[ "$1" == "--uninstall" ]]; then
    uninstall_all
  elif (( $# == 0 )); then
    install_all
  else
    cat <<USAGE >&2
Usage:
  $0                 Install activation + generate wrappers + add paths + brew/podman/machine
  $0 --uninstall     Remove EVERYTHING this script installed (incl. Podman machine)
USAGE
    exit 2
  fi
}

main "$@"
