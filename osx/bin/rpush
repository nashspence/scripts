#!/bin/sh
# Minimal Finder-backed network copy/move for macOS.
# Usage: rpush [--ignore-dotfiles] <copy|move> <SRC_PATH> <URL>
# URL schemes: smb://  nfs://  http(s):// (WebDAV)

set -eu

ignore_dotfiles=0
if [ "${1-}" = "--ignore-dotfiles" ]; then
  ignore_dotfiles=1
  shift
fi

if [ "$#" -ne 3 ]; then
  printf 'Usage: %s [--ignore-dotfiles] <copy|move> <SRC_PATH> <URL>\n' "$0" >&2
  exit 64
fi

op=$1
SRC=$2
URL=$3

case "$op" in
  copy|move) ;;
  *) printf 'First arg must be "copy" or "move"\n' >&2; exit 64 ;;
esac

src_has_trailing_slash=0
case "$SRC" in
  */) src_has_trailing_slash=1 ;;
esac
SRC_CHECK=${SRC%/}

if [ -d "$SRC_CHECK" ]; then
  is_dir=1
  is_file=0
elif [ -f "$SRC_CHECK" ]; then
  is_dir=0
  is_file=1
else
  printf 'No such file or directory: %s\n' "$SRC_CHECK" >&2
  exit 2
fi

if [ $is_file -eq 1 ] && [ $src_has_trailing_slash -eq 1 ]; then
  printf 'Trailing slash not allowed on file paths: %s\n' "$SRC" >&2
  exit 64
fi

if [ $ignore_dotfiles -eq 1 ] && { [ $src_has_trailing_slash -eq 0 ] || [ $is_dir -eq 0 ]; }; then
  printf '%s\n' "--ignore-dotfiles requires a directory path ending with '/': $SRC" >&2
  exit 64
fi

proto=${URL%%:*}
rest=${URL#*://}
host=${rest%%/*}
path_all=""
[ "$rest" != "$host" ] && path_all=${rest#*/}

case "$proto" in
  smb|nfs|http|https) ;;
  *) printf 'Unsupported protocol: %s (allowed: smb,nfs,http,https)\n' "$proto" >&2; exit 64 ;;
esac

# Mount the network volume
/usr/bin/osascript -e "try" -e "mount volume \"$URL\"" -e "end try" >/dev/null 2>&1 || true

# Guess mount point
if [ "$proto" = "smb" ]; then
  share=${path_all%%/*}
  [ -n "$share" ] || { printf 'smb:// requires smb://HOST/SHARE[/sub/dir]\n' >&2; exit 64; }
  mount_point="/Volumes/$(printf '%b' "$(printf '%s' "$share" | sed 's/+/ /g;s/%/\\x/g')")"
  dest_sub=""
  [ "$path_all" = "$share" ] || dest_sub=${path_all#*/}
else
  base=$host
  [ -n "$path_all" ] && base=${path_all##*/}
  mount_point="/Volumes/$(printf '%b' "$(printf '%s' "$base" | sed 's/+/ /g;s/%/\\x/g')")"
  dest_sub=""
fi

[ -d "$mount_point" ] || { printf 'Failed to mount %s\n' "$URL" >&2; exit 4; }

dest="$mount_point"
if [ -n "$dest_sub" ]; then
  decoded_sub=$(printf '%b' "$(printf '%s' "$dest_sub" | sed 's/+/ /g;s/%/\\x/g')")
  dest="$dest/$decoded_sub"
fi

if [ "$op" = copy ]; then
  if [ $src_has_trailing_slash -eq 1 ]; then
    if [ $ignore_dotfiles -eq 1 ]; then
      rsync -a --exclude='.*' "$SRC" "$dest"
    else
      rsync -a "$SRC" "$dest"
    fi
  else
    [ $ignore_dotfiles -eq 0 ] || { printf '%s\n' '--ignore-dotfiles requires a directory path ending with "/"' >&2; exit 64; }
    cp -R "$SRC" "$dest"
  fi
else
  if [ $src_has_trailing_slash -eq 1 ]; then
    if [ $ignore_dotfiles -eq 1 ]; then
      rsync -a --remove-source-files --exclude='.*' "$SRC" "$dest"
      find "$SRC_CHECK" -type d -empty -delete
    else
      rsync -a --remove-source-files "$SRC" "$dest"
      find "$SRC_CHECK" -type d -empty -delete
    fi
  else
    mv "$SRC" "$dest"
  fi
fi
