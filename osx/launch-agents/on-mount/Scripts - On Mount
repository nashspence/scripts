#!/bin/sh
# shellcheck shell=sh
# Triggered by launchd's StartOnMount event to run per-volume scripts once per mount.

set -eu

marker=".com.nashspence.scripts.on-mount.id"
onmount_dir="$HOME/git/osx-on-mount"

base=$(cd "$(dirname "$0")" && pwd)
data="$base/data"
state="$data/state.tsv"
tmp_state="$state.new"
lock="$HOME/Library/Caches/com.nashspence.scripts.on-mount.lock"

ts() { date '+%Y-%m-%d %H:%M:%S%z'; }
log() { printf '[%s] %s\n' "$(ts)" "$*"; }
warn() { printf '[%s] %s\n' "$(ts)" "$*" >&2; }

umask 077
mkdir -p "$data"
touch "$state"

if ! mkdir "$lock" 2>/dev/null; then
    warn "Another instance appears to be running (lock: $lock). Exiting."
    exit 0
fi

cleanup() {
    rm -f "$tmp_state"
    rmdir "$lock"
}
trap cleanup EXIT

: >"$tmp_state"
ran=0

for vol in /Volumes/*; do
    [ -d "$vol" ] || continue
    file="$vol/$marker"
    [ -r "$file" ] || continue

    uuid=$(/usr/sbin/diskutil info -plist "$vol" 2>/dev/null |
        /usr/bin/plutil -extract VolumeUUID raw -o - - 2>/dev/null ||
        /usr/bin/plutil -extract APFSVolumeUUID raw -o - - 2>/dev/null ||
        true)
    [ -n "$uuid" ] || continue

    fsid=$(/usr/bin/stat -f '%d' "$vol" 2>/dev/null || true)
    [ -n "$fsid" ] || continue

    printf '%s\t%s\n' "$uuid" "$fsid" >>"$tmp_state"

    prev_fsid=$(awk -F'\t' -v u="$uuid" '$1==u{print $2}' "$state")
    if [ "$fsid" != "$prev_fsid" ]; then
        volname=$(basename "$vol")
        name=$(head -n 1 "$file" 2>/dev/null | tr -d '\r\n' || true)
        [ -n "$name" ] || continue
        prog="$onmount_dir/$(basename "$name")"
        if [ -x "$prog" ]; then
            log "Executing \"$prog\" for \"$volname\""
            if ! osascript - "$prog" "$vol" <<'EOF'
on run argv
  tell application "Terminal"
    set t to (do script ("exec " & quoted form of item 1 of argv & " " & quoted form of item 2 of argv))
    activate
    try
      set selected tab of (front window) to t
    end try
  end tell
end run
EOF
            then
                warn "osascript exited with status $? for \"$volname\""
            fi
            ran=$((ran + 1))
        else
            warn "No executable named \"$name\" in $onmount_dir; skipping $volname."
        fi
    fi
done

mv -f "$tmp_state" "$state"
entries=$(wc -l <"$state" | awk '{print $1}')
log "State updated: $entries entries."
log "Done. Triggered $ran time(s)."
